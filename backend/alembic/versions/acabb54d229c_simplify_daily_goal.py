"""Simplify daily goal
Revision ID: acabb54d229c
Revises: 673efb0aa40e
Create Date: 2024-07-28 23:49:16.777328
"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.sql import column, table

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "acabb54d229c"
down_revision: Union[str, None] = "673efb0aa40e"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("dailygoal", sa.Column("total_minutes", sa.Integer(), nullable=True))

    # Create a table object for the update
    dailygoal = table(
        "dailygoal",
        column("quantity", sa.Integer),
        column("block_size", sa.Integer),
        column("total_minutes", sa.Integer),
    )

    # Update total_minutes based on quantity and block_size
    op.execute(
        dailygoal.update().values(
            total_minutes=dailygoal.c.quantity * dailygoal.c.block_size
        )
    )

    # Make total_minutes not nullable after populating it
    op.alter_column("dailygoal", "total_minutes", nullable=False)

    op.drop_constraint("uq_user_quantity_block_size", "dailygoal", type_="unique")
    op.create_unique_constraint(
        "uq_user_total_minutes", "dailygoal", ["user_id", "total_minutes"]
    )
    op.drop_column("dailygoal", "quantity")
    op.drop_column("dailygoal", "block_size")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "dailygoal",
        sa.Column("block_size", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "dailygoal",
        sa.Column("quantity", sa.INTEGER(), autoincrement=False, nullable=True),
    )

    # Create a table object for the update
    dailygoal = table(
        "dailygoal",
        column("quantity", sa.Integer),
        column("block_size", sa.Integer),
        column("total_minutes", sa.Integer),
    )

    # Set quantity to total_minutes and block_size to 1 as a default
    op.execute(
        dailygoal.update().values(quantity=dailygoal.c.total_minutes, block_size=1)
    )

    # Make quantity and block_size not nullable after populating them
    op.alter_column("dailygoal", "quantity", nullable=False)
    op.alter_column("dailygoal", "block_size", nullable=False)

    op.drop_constraint("uq_user_total_minutes", "dailygoal", type_="unique")
    op.create_unique_constraint(
        "uq_user_quantity_block_size",
        "dailygoal",
        ["user_id", "quantity", "block_size"],
    )
    op.drop_column("dailygoal", "total_minutes")
    # ### end Alembic commands ###
